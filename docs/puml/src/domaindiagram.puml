@startuml app

interface INote{
    Only do images if we have time
    UUID's are not settable, only create with alongside INote
    ..
    +getTitle():String
    +getDate():DateTime
    +getBody():String
    +getImage():dart:io:File
    +getUUID():String
    +getScore():double
    ..
    +setTitle(String newTitle)
    +setDate(DateTime newDateTime)
    +setBody(String newBody)
    +setImage(dart:io:File newImage)
    ..
    +fromJson(Map<String, dynamic> json)
    +toJson():Map<String, dynamic>
}
note top of INote: https://pub.dev/packages/image_picker for choosing images\nhttps://pub.dev/packages/uuid for creating note uuid's

interface INoteStorage{
    Ideally getTitle will be much less expensive to execute per note
    TODO: methods that reduce database accesses
    +getNotes(DateTime from, DateTime to):List<String> list of uuids
    +getNote(String uuid):INote
    +getTitle(String uuid):String lighter than getting a full note
    +putNote(INote newNote):bool
}

class DemoLocalFileNoteStorage{
    Just uses a simple file to store notes and note info for hackathon demo purposes
    +getNotes():List<String> list of uuids
    +getNote(String uuid):INote
    +getTitle(String uuid):String
    +putNote(INote newNote):bool
}

class OnlineDatabaseNoteStorage{
    Uses some form of database backend for storage. Stretch goal or post hackathon development
    +getNotes():List<String> list of uuids
    +getNote(String uuid):INote
    +getTitle(String uuid):String
    +putNote(INote newNote):bool
}

class Note{
    title: String
    date: DateTime
    body: String
    image: File
    uuid: String
}

interface ISentimentAnalyzer{
    This would probably run in the backend
    +analyzeText(String contents):double
}

class Calendar{
    IDK what to put but here's a table_calendar package
    https://pub.dev/packages/table_calendar
}

class DemoNaiveSentimentAnalyzer{
    For hackathon purposes
    +analyzeText(String contents):double
}

class ArtificialIntelligenceAnalyzer{
    Stretch goal, low priority for Hackathon
    +analyzeText(String contents):double
}
class NoteMakerScreen{
    What the user uses to make notes
}

class MonthViewScreen{
    What the user uses to view their review
}

DemoLocalFileNoteStorage ..|> INoteStorage
OnlineDatabaseNoteStorage ..|> INoteStorage
Note --|> INote
ArtificialIntelligenceAnalyzer ..|> ISentimentAnalyzer
DemoNaiveSentimentAnalyzer ..|> ISentimentAnalyzer

Calendar -> INoteStorage: Populates with data from
INoteStorage - ISentimentAnalyzer
note on link
When adding a new note to the storage, analyze its sentiment
end note

INote --> NoteMakerScreen: Produced by
NoteMakerScreen --> INoteStorage: stores Notes into
Calendar <-- MonthViewScreen: populates UI with info from
@enduml